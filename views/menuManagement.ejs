<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>DigiDiner</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">

    <style>
        .nav-link {
            font-size: 1.2rem;
        }

        .nav-link.active {
            background-color: #e3f2fd;
        }

        header {
            box-shadow: 0 2px 4px rgba(84, 84, 84, 0.1);
        }

        footer {
            background-color: #f8f9fa;
            /* Solid color for the footer */
            padding: 20px 0;
            /* Adjust padding as needed */
            color: #6c757d;
            /* Text color */
            text-align: center;
        }
    </style>
</head>

<body>
    <header>
        <div class="col-md-12">
            <%- include('partials/head') %>
        </div>
    </header>

    <main>
        <div id="managerEditButtonWrapper" class="manager-edit-button-wrapper">
            <button id="managerEditButton" class="btn btn-primary managerEditButton">Edit</button>
        </div>
        <br>
        <hr class="section-divider">
        <%- include('partials/menu') %>
    </main>
    <!-- Modal for creating a new item -->
    <div class="modal fade" id="newItemModal" tabindex="-1" aria-labelledby="newItemModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newItemModalLabel">Create New Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="itemName" class="form-label">Item Name</label>
                            <input type="text" class="form-control" id="itemName" required>
                        </div>
                        <div class="mb-3">
                            <label for="itemDescription" class="form-label">Item Description</label>
                            <input type="text" class="form-control" id="itemDescription" required>
                        </div>
                        <div class="mb-3">
                            <label for="itemPrice" class="form-label">Item Price</label>
                            <input type="number" class="form-control" id="itemPrice" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="itemCategory" class="form-label">Item Category</label>
                            <input type="text" class="form-control" id="itemCategory" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveNewItem()">Create</button>
                </div>
            </div>
        </div>
    </div>
    <footer>
        <%- include('partials/footer') %>
    </footer>
    <script src="/js/bootstrap.bundle.min.js"></script>
</body>

<script>
    function hideMenuSections() {
        const addToOrderButtons = document.querySelectorAll('#addToOrderBtn');
        addToOrderButtons.forEach(button => {
            button.style.display = 'none';
        });

        const allergySections = document.querySelectorAll('#allergy');
        allergySections.forEach(section => {
            section.style.display = 'none';
        });

        const specialRequestSections = document.querySelectorAll('#specialRequest');
        specialRequestSections.forEach(section => {
            section.style.display = 'none';
        });
    }

    async function toggleEditOptions() {
        const managerEditButtonWrapper = document.getElementById('managerEditButtonWrapper');
        managerEditButtonWrapper.style.display = 'block';

        const managerEditButton = document.getElementById('managerEditButton');
        managerEditButton.innerText = 'Edit';
        managerEditButton.addEventListener('click', toggleSaveNewDeleteButtons);
    }

    function toggleSaveNewDeleteButtons() {
        const managerEditButtonWrapper = document.getElementById('managerEditButtonWrapper');
        managerEditButtonWrapper.innerHTML = `
                <button class="btn btn-primary" onclick="saveChanges()">Save</button>
                <button class="btn btn-primary" onclick="createNewItem()">New Item</button>
                <button class="btn btn-danger" onclick="deleteItems()">Delete</button>
            `;

        const menuItems = document.querySelectorAll('.accordion-item');
        menuItems.forEach((item) => {
            const checkbox = document.createElement('input');
            checkbox.setAttribute('type', 'checkbox');
            checkbox.classList.add('edit-checkbox');
            item.prepend(checkbox);
        });

        const itemNames = document.querySelectorAll('.item-name');
        itemNames.forEach((name) => {
            const nameInput = document.createElement('input');
            nameInput.setAttribute('type', 'text');
            nameInput.value = name.innerText;
            name.innerText = '';
            name.appendChild(nameInput);
        });

        const itemPrices = document.querySelectorAll('.item-price');
        itemPrices.forEach((price) => {
            const priceInput = document.createElement('input');
            priceInput.setAttribute('type', 'number');
            priceInput.value = price.innerText;
            price.innerText = '';
            price.appendChild(priceInput);
        });

        const itemDescriptions = document.querySelectorAll('.item-description');
        itemDescriptions.forEach((description) => {
            const descriptionInput = document.createElement('textarea');
            descriptionInput.setAttribute('type', 'text');
            descriptionInput.value = description.innerText;
            description.innerText = '';
            description.appendChild(descriptionInput);
        });
    }

    async function refreshMenu() {
        try {
            const response = await fetch('/api/menu');
            if (!response.ok) {
                throw new Error('Failed to fetch menu data');
            }
            const menuItems = await response.json();
            updateMenuItems(menuItems);
        } catch (error) {
            console.error('Error refreshing menu:', error);
        }
    }

    function createNewItem() {
        document.getElementById('itemName').value = '';
        document.getElementById('itemDescription').value = '';
        document.getElementById('itemPrice').value = '';
        document.getElementById('itemCategory').value = '';
        const newItemModal = new bootstrap.Modal(document.getElementById('newItemModal'));
        newItemModal.show();
    }

    async function addMenuItem(newItem) {
        const response = await fetch('/api/menu', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newItem),
        });

        if (response.ok) {
            const newItemData = await response.json();
            console.log('New item added:', newItemData);
        } else {
            console.error('Failed to add new item:', response.status, response.statusText);
        }
    }

    async function saveNewItem() {
        const itemName = document.getElementById('itemName').value;
        const itemDescription = document.getElementById('itemDescription').value;
        const itemPrice = parseFloat(document.getElementById('itemPrice').value);
        const itemCategory = document.getElementById('itemCategory').value;

        if (itemName && itemDescription && !isNaN(itemPrice) && itemCategory) {
            const newItem = {
                name: itemName,
                description: itemDescription,
                price: itemPrice,
                category: itemCategory,
            };

            try {
                await addMenuItem(newItem);
                const newItemModal = new bootstrap.Modal(document.getElementById('newItemModal'));
                newItemModal.hide();
                await refreshMenu();
            } catch (error) {
                alert('Failed to add new item. Please try again.');
            }
        } else {
            alert('Please provide all the required fields to create a new item.');
        }
    }


    async function updateMenuItems(itemsToUpdate) {
        for (const item of itemsToUpdate) {
            const { id, name, description, price, category } = item;

            const menuItemButton = document.getElementById(`heading${id}`).querySelector('.accordion-button');
            const menuItemPriceBadge = menuItemButton.querySelector('.badge.bg-primary');
            const itemDescription = document.getElementById(`collapse${id}`).querySelector('.item-description');
            console.log('ID:', id);
            console.log('menuItemButton:', menuItemButton);
            console.log('menuItemPriceBadge:', menuItemPriceBadge);
            console.log('itemDescription:', itemDescription);

            menuItemButton.textContent = name;
            menuItemPriceBadge.textContent = `$${Number(price).toFixed(2)}`;
            itemDescription.textContent = description;

            const updatedData = {
                name,
                description,
                price,
                category,
            };

            try {
                const response = await fetch(`/api/menu/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updatedData),
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                console.log(data.message);
            } catch (error) {
                console.error('Error:', error);
            }
        }
    }

    async function deleteItems() {
        const itemsToDelete = [];
        const checkboxes = document.querySelectorAll('.edit-checkbox');
        checkboxes.forEach((checkbox) => {
            if (checkbox.checked) {
                /* console.log(checkbox);
                console.log(checkbox.parentNode);
                console.log(checkbox.parentNode.parentNode);
                console.log(checkbox.parentNode.parentNode.getAttribute('id')); */
                const menuItemId = checkbox.closest('.accordion-item').querySelector('.accordion-collapse').getAttribute('id').replace('collapse', '');
                console.log('menuItemId: ', menuItemId);
                itemsToDelete.push(menuItemId);
            }
        });
        for (const itemId of itemsToDelete) {
            const response = await fetch(`/api/menu/${itemId}`, {
                method: 'DELETE',
            });
            if (response.ok) {
                console.log('Item deleted:', itemId);
            } else {
                console.error('Failed to delete item:', response.status, response.statusText);
            }
        }
        refreshMenu();
    }

    async function saveChanges() {
        const itemsToUpdate = [];
        const itemNames = document.querySelectorAll('.accordion-item .item-name input');
        const itemDescriptions = document.querySelectorAll('.accordion-item .item-description textarea');
        const itemPrices = document.querySelectorAll('.accordion-item .item-price input');

        itemNames.forEach((input, index) => {
            const menuItemId = input.closest('.accordion-item').getAttribute('id').replace('heading', '');
            const newItemName = input.value;
            const newItemDescription = itemDescriptions[index].value;
            const newItemPrice = parseFloat(itemPrices[index].value);
            itemsToUpdate.push({ id: menuItemId, name: newItemName, description: newItemDescription, price: newItemPrice });
        });

        const itemsToDelete = [];
        const checkboxes = document.querySelectorAll('.edit-checkbox');
        checkboxes.forEach((checkbox) => {
            if (checkbox.checked) {
                const menuItemId = checkbox.parentNode.parentNode.getAttribute('id').replace('heading', '');
                itemsToDelete.push(menuItemId);
            }
        });

        await updateMenuItems(itemsToUpdate);
        await deleteItems(itemsToDelete);
        refreshMenu();
        hideMenuSections();
    }

    document.addEventListener('DOMContentLoaded', () => {
        toggleEditOptions();
        hideMenuSections();
    });
</script>

</html>