<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>DigiDiner</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">

    <style>
        .nav-link {
            font-size: 1.2rem;
        }

        .nav-link.active {
            background-color: #e3f2fd;
        }

        header {
            box-shadow: 0 2px 4px rgba(84, 84, 84, 0.1);
        }

        footer {
            background-color: #f8f9fa;
            /* Solid color for the footer */
            padding: 20px 0;
            /* Adjust padding as needed */
            color: #6c757d;
            /* Text color */
            text-align: center;
        }
    </style>
</head>

<body>
    <header>
        <div class="col-md-12">
            <%- include('partials/head') %>
        </div>
    </header>

    <main>
        <div id="managerEditButtonWrapper" class="manager-edit-button-wrapper">
            <button id="managerEditButton" class="btn btn-primary managerEditButton">Edit</button>
        </div>
        <br>
        <hr class="section-divider">
        <%- include('partials/menu') %>
    </main>
    <!-- Modal for creating a new item -->
    <div class="modal fade" id="newItemModal" tabindex="-1" aria-labelledby="newItemModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newItemModalLabel">Create New Item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="itemName" class="form-label">Item Name</label>
                            <input type="text" class="form-control" id="itemName" required>
                        </div>
                        <div class="mb-3">
                            <label for="itemDescription" class="form-label">Item Description</label>
                            <input type="text" class="form-control" id="itemDescription" required>
                        </div>
                        <div class="mb-3">
                            <label for="itemPrice" class="form-label">Item Price</label>
                            <input type="number" class="form-control" id="itemPrice" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label for="itemCategory" class="form-label">Item Category</label>
                            <input type="text" class="form-control" id="itemCategory" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveNewItem()">Create</button>
                </div>
            </div>
        </div>
    </div>
    <footer>
        <%- include('partials/footer') %>
    </footer>
    <script src="/js/bootstrap.bundle.min.js"></script>
</body>

<script>
    function hideMenuSections() {
        const addToOrderButtons = document.getElementById('addToOrderBtn');
        addToOrderButtons.style.display = 'none';

        const allergySections = document.getElementById('allergy');
        allergySections.style.display = 'none';

        const specialRequestSections = document.getElementById('specialRequest');
        specialRequestSections.style.display = 'none';
    }

    function showEditOptions() {
        const managerEditButtonWrapper = document.getElementById('managerEditButtonWrapper');
        managerEditButtonWrapper.innerHTML = `
        <button class="btn btn-primary" onclick="saveChanges()">Save</button>
        <button class="btn btn-primary" onclick="createNewItem()">New Item</button>
        <button class="btn btn-danger" onclick="deleteItems()">Delete</button>
    `;

        const menuItems = document.querySelectorAll('.accordion-item');
        menuItems.forEach((item) => {
            const checkbox = document.createElement('input');
            checkbox.setAttribute('type', 'checkbox');
            checkbox.classList.add('edit-checkbox');
            item.prepend(checkbox);
        });

        const itemNames = document.querySelectorAll('.accordion-header button');
        itemNames.forEach((name) => {
            const input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.value = name.innerText;
            // Create a wrapper div to contain both the input and the description
            const wrapperDiv = document.createElement('div');
            wrapperDiv.style.display = 'flex';
            wrapperDiv.appendChild(input);

            // Create the <p> element for displaying the description
            const descriptionP = document.createElement('p');
            descriptionP.textContent = name.nextElementSibling.querySelector('p').textContent;
            wrapperDiv.appendChild(descriptionP);

            name.innerHTML = '';
            name.appendChild(wrapperDiv);
        });

        const itemDescriptions = document.querySelectorAll('.accordion-item p');
        itemDescriptions.forEach((description, index) => {
            const input = document.createElement('input');
            input.setAttribute('type', 'text');
            input.value = description.innerText;
            description.innerHTML = '';
            description.appendChild(input);
        });

        const managerEditButton = document.getElementById('managerEditButton');
        managerEditButton.innerText = 'Save';
        managerEditButton.addEventListener('click', () => {
            saveChanges();
        });
    }

    async function editButtons() {
        const managerEditButtonWrapper = document.getElementById('managerEditButtonWrapper');
        managerEditButtonWrapper.style.display = 'block';

        const managerEditButton = document.getElementById('managerEditButton');
        managerEditButton.addEventListener('click', () => {
            showEditOptions();
        });

    }

    async function saveNewItem() {
        const itemName = document.getElementById('itemName').value;
        const itemDescription = document.getElementById('itemDescription').value;
        const itemPrice = parseFloat(document.getElementById('itemPrice').value);
        const itemCategory = document.getElementById('itemCategory').value;

        if (itemName && itemDescription && !isNaN(itemPrice) && itemCategory) {
            const newItem = {
                name: itemName,
                description: itemDescription,
                price: itemPrice,
                category: itemCategory,
            };

            await addMenuItem(newItem);
            await refreshMenu();
            const newItemModal = new bootstrap.Modal(document.getElementById('newItemModal'));
            newItemModal.hide();
        } else {
            alert('Please provide all the required fields to create a new item.');
        }
    }

    async function saveChanges() {
        const itemsToUpdate = [];
        const itemNames = document.querySelectorAll('.accordion-header input[type="text"]');
        const itemDescriptions = document.querySelectorAll('.accordion-item input[type="text"]');
        itemNames.forEach((input) => {
            const menuItemId = input.parentNode.parentNode.getAttribute('id').replace('heading', '');
            const newItemName = input.value;
            const newItemDescription = itemDescriptions[index].value;
            itemsToUpdate.push({ id: menuItemId, name: newItemName, description: newItemDescription });
        });

        const itemsToDelete = [];
        const checkboxes = document.querySelectorAll('.edit-checkbox');
        checkboxes.forEach((checkbox) => {
            if (checkbox.checked) {
                const menuItemId = checkbox.parentNode.getAttribute('id').replace('heading', '');
                itemsToDelete.push(menuItemId);
            }
        });

        await updateMenuItems(itemsToUpdate);
        await deleteMenuItems(itemsToDelete);
        refreshMenu();
        hideMenuSections();
    }

    function createNewItem() {
        // Clear the input fields in the modal
        document.getElementById('itemName').value = '';
        document.getElementById('itemDescription').value = '';
        document.getElementById('itemPrice').value = '';
        document.getElementById('itemCategory').value = '';
        const newItemModal = new bootstrap.Modal(document.getElementById('newItemModal'));
        newItemModal.show();
    }

    async function deleteItems() {
        const itemsToDelete = [];
        const checkboxes = document.querySelectorAll('.edit-checkbox');
        checkboxes.forEach((checkbox) => {
            if (checkbox.checked) {
                const menuItemId = checkbox.parentNode.getAttribute('id').replace('heading', '');
                itemsToDelete.push(menuItemId);
            }
        });
        await deleteMenuItems(itemsToDelete);
        refreshMenu();
    }

    // Helper function to update menu items in the backend
    async function updateMenuItems(itemsToUpdate) {
        for (const item of itemsToUpdate) {
            const { id, name, description } = item;
            await updateMenu(id, { name, description });
        }
    }

    // Helper function to delete menu items in the backend
    async function deleteMenuItems(itemsToDelete) {
        for (const itemId of itemsToDelete) {
            await removeMenuItem(itemId);
        }
    }

    // Helper function to refresh the menu after making changes
    async function refreshMenu() {
        try {
            const response = await fetch('/api/menu');
            if (!response.ok) {
                throw new Error('Failed to fetch menu data');
            }
            const menuItems = await response.json();
            updateMenuContent(menuItems);
        } catch (error) {
            console.error('Error refreshing menu:', error);
        }
    }

    // Function to update the menu content dynamically
    function updateMenuContent(menuItems) {
        const menuContainer = document.getElementById('menu');
        if (!menuContainer) {
            console.error('Error: Menu container not found in the DOM.');
            return;
        }
        for (const menuHeader of menuContainer.children) {
            const categoryContent = menuHeader.nextElementSibling;
            const filteredItems = menuItems.filter(item => item.category === menuHeader.id);
            const accordionItems = categoryContent.getElementsByClassName('accordion-item');

            for (let i = 0; i < filteredItems.length; i++) {
                const menuItem = filteredItems[i];
                const accordionItem = accordionItems[i];
                const menuItemButton = accordionItem.querySelector('.accordion-button');
                const menuItemPriceBadge = menuItemButton.querySelector('.badge.bg-primary');
                const itemDescription = accordionItem.querySelector('p');
                const itemDescriptionInput = accordionItem.querySelector('input[type="text"]');

                menuItemButton.textContent = menuItem.name;
                menuItemPriceBadge.textContent = `$${Number(menuItem.price).toFixed(2)}`;
                itemDescription.textContent = menuItem.description;
                itemDescriptionInput.value = menuItem.description;

                const optionsList = accordionItem.querySelector('.list-group');

                if (menuItem.options.length > 0) {
                    const optionItems = optionsList.getElementsByClassName('list-group-item');

                    for (let j = 0; j < menuItem.options.length; j++) {
                        const option = menuItem.options[j];
                        const optionItem = optionItems[j];
                        const optionCheckbox = optionItem.querySelector('.form-check-input');
                        const optionLabel = optionItem.querySelector('.form-check-label');
                        const optionPriceBadge = optionLabel.querySelector('.badge.bg-secondary');

                        optionCheckbox.value = option.name;
                        optionCheckbox.id = option.id;
                        optionLabel.textContent = option.name;

                        if (option.price) {
                            optionPriceBadge.textContent = `$${Number(option.price).toFixed(2)}`;
                        } else {
                            optionPriceBadge.textContent = '';
                        }
                    }
                }
            }
        }
    }

    // Helper function to add a new menu item in the backend
    async function addMenuItem(newItem) {
        // Make a POST request to the backend API to add the new item
        const response = await fetch('/api/menu', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newItem),
        });

        if (response.ok) {
            const newItemData = await response.json();
            console.log('New item added:', newItemData);
        } else {
            console.error('Failed to add new item:', response.status, response.statusText);
        }
    }

    // Helper function to remove a menu item from the backend
    async function removeMenuItem(itemId) {
        const response = await fetch(`/api/menu/${itemId}`, {
            method: 'DELETE',
        });

        if (response.ok) {
            console.log('Item deleted:', itemId);
        } else {
            console.error('Failed to delete item:', response.status, response.statusText);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        editButtons();
        hideMenuSections();
    });
</script>

</html>