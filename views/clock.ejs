<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>DigiDiner</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <%- include('partials/session') %>
</head>

<body>
    <header>
        <%- include('partials/head') %>
    </header>
    <!-- clock.ejs -->
    <main>
        <div class="container">
            <div class="text-center mt-4">
                <h1>Time Clock</h1>
                <h3>Welcome, <%= employee.nameFirst %>
                        <%= employee.nameLast %> (ID: <%= employee.id %>)</h3>
            </div>

            <div class="text-center mt-4">
                <h4>Current Status:</h4>
                <p><strong id="status">
                        <%= status %>
                    </strong></p>
            </div>

            <div class="text-center mt-4">
                <% if (status==='Clocked In' ) { %>
                    <button id="clockOutBtn" class="btn btn-primary" type="button"
                        onclick="showConfirmationModal('clockOut')">Clock Out</button>
                    <% } else { %>
                        <button id="clockInBtn" class="btn btn-primary" type="button"
                            onclick="showConfirmationModal('clockIn')">Clock In</button>
                        <% } %>
            </div>

            <div class="text-center mt-4">
                <h3>Timestamp Punches</h3>
                <h4>Current Week:</h4>
                <p><strong id="currentDisplayDate">Loading...</strong></p>
                <div class="timestamp-table-container">
                    <table id="punchRecordTable" class="table">
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody id="punchRecord">
                            <!-- The timestamp records will be displayed here -->
                        </tbody>
                    </table>
                </div>
                <div class="timestamp-navigation">
                    <button class="btn btn-primary" onclick="showPrevWeek()">Prev</button>
                    <button class="btn btn-primary" onclick="showNextWeek()">Next</button>
                </div>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div class="modal fade" id="confirmationModal" tabindex="-1" role="dialog"
            aria-labelledby="confirmationModalTitle" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmationModalTitle"></h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to <span id="statusAction">
                                <%= status %>
                            </span>? This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" onclick="confirmAction()">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <script src="/js/jquery.min.js"></script>
    <script src="/js/bootstrap.bundle.min.js"></script>
    <script>
        function showConfirmationModal(action) {
            const status = action === 'clockIn' ? 'Clock In' : 'Clock Out';

            // Show the confirmation modal
            $('#confirmationModalTitle').text(`Confirm ${status}`);
            $('#statusAction').text(status);
            $('#confirmationModal').modal('show');

            // Call the clock in/out functions directly
            if (action === 'clockIn') {
                clockIn();
            } else {
                clockOut();
            }
        }

        // Function to handle the confirmation
        async function confirmAction() {
            const status = $('#statusAction').text();
            $('#status').text(status);

            // Generate the timestamp punch
            const timestamp = new Date().toLocaleString();
            const punchItem = `
                <tr>
                    <td>${timestamp}</td>
                    <td>${status}</td>
                </tr>
            `;
            $('#punchRecord').prepend(punchItem);

            if (status === 'Clock In') {
                await clockIn();
            } else {
                await clockOut();
            }

            location.reload();
        }

        // Function to perform the clock in action
        async function clockIn() {
            try {
                const response = await fetch('/api/common/employee/clockin', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({}),
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('Clock In Successful:', data);
                } else {
                    console.error('Clock In Failed:', response.status);
                }
            } catch (error) {
                console.error('Clock In Failed:', error);
            }
        }

        // Function to perform the clock out action
        async function clockOut() {
            try {
                const response = await fetch('/api/common/employee/clockout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({}),
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('Clock Out Successful:', data);
                } else {
                    console.error('Clock Out Failed:', response.status);
                }
            } catch (error) {
                console.error('Clock Out Failed:', error);
            }
        }

        // Function to display the timestamp records for the current week
        async function showCurrentWeek() {
            try {
                const response = await fetch('/api/common/employee/clock', {
                    method: 'GET',
                });

                if (response.ok) {
                    const data = await response.json();
                    // Filter timestamps for the current week
                    const currentDate = new Date();
                    const startOfWeek = new Date(currentDate);
                    startOfWeek.setDate(currentDate.getDate() - currentDate.getDay());
                    const endOfWeek = new Date(currentDate);
                    endOfWeek.setDate(currentDate.getDate() + (6 - currentDate.getDay()));

                    const currentWeekTimestamps = data.periods.filter(punch =>
                        new Date(punch.startTime) >= startOfWeek && new Date(punch.startTime) <= endOfWeek
                    );
                    const punchRecordTable = document.getElementById('punchRecord');
                    punchRecordTable.innerHTML = '';

                    currentWeekTimestamps.forEach(punch => {
                        const timestamp = new Date(punch.startTime).toLocaleString();
                        const status = punch.endTime ? 'Clock Out' : 'Clock In';
                        const punchItem = `
                    <tr>
                        <td>${timestamp}</td>
                        <td>${status}</td>
                    </tr>
                `;
                        punchRecordTable.insertAdjacentHTML('beforeend', punchItem);
                    });

                    // Update the current display date with the first and last timestamp records of the week
                    const firstTimestamp = currentWeekTimestamps[0]?.startTime;
                    const lastTimestamp = currentWeekTimestamps[currentWeekTimestamps.length - 1]?.startTime;
                    if (firstTimestamp && lastTimestamp) {
                        const firstDayOfWeek = new Date(firstTimestamp);
                        firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay());
                        const lastDayOfWeek = new Date(lastTimestamp);
                        lastDayOfWeek.setDate(lastDayOfWeek.getDate() + (6 - lastDayOfWeek.getDay()));
                        $('#currentDisplayDate').text(
                            firstDayOfWeek.toLocaleDateString('en-us', { month: 'long', day: 'numeric' }) +
                            ' - ' + lastDayOfWeek.toLocaleDateString('en-us', { month: 'long', day: 'numeric' })
                        );
                    } else {
                        $('#currentDisplayDate').text('No timestamp records found for this week');
                    }
                } else {
                    console.error('Failed to fetch timestamp records:', response.status);
                }
            } catch (error) {
                console.error('Error fetching timestamp records:', error);
            }
        }

        async function showPrevWeek() {
            const currentDisplayDate = new Date($('#currentDisplayDate').text());
            if (isNaN(currentDisplayDate)) return;

            currentDisplayDate.setDate(currentDisplayDate.getDate() - 7);

            const firstDayOfWeek = new Date(currentDisplayDate);
            firstDayOfWeek.setDate(currentDisplayDate.getDate() - currentDisplayDate.getDay());
            const lastDayOfWeek = new Date(currentDisplayDate);
            lastDayOfWeek.setDate(currentDisplayDate.getDate() + (6 - currentDisplayDate.getDay()));

            await showCurrentWeek(firstDayOfWeek, lastDayOfWeek);
        }

        async function showNextWeek() {
            const currentDisplayDate = new Date($('#currentDisplayDate').text());
            if (isNaN(currentDisplayDate)) return;

            currentDisplayDate.setDate(currentDisplayDate.getDate() + 7);

            const firstDayOfWeek = new Date(currentDisplayDate);
            firstDayOfWeek.setDate(currentDisplayDate.getDate() - currentDisplayDate.getDay());
            const lastDayOfWeek = new Date(currentDisplayDate);
            lastDayOfWeek.setDate(currentDisplayDate.getDate() + (6 - currentDisplayDate.getDay()));

            await showCurrentWeek(firstDayOfWeek, lastDayOfWeek);
        }
        showCurrentWeek();

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('clockOutBtn').addEventListener('click', showConfirmationModal);
            document.getElementById('clockInBtn').addEventListener('click', showConfirmationModal);
        });

    </script>
    <footer>
        <%- include('partials/footer') %>
    </footer>
</body>

</html>